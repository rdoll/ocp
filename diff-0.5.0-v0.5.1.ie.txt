Only in /var/www/ocp/0.5.0: diff-0.5.0-v0.42.txt
Only in /var/www/ocp/0.5.0: diff-0.5.0-v0.5.1.ie.txt
Only in /var/www/ocp/0.5.0: NOTES.txt
Only in /var/www/ocp/0.5.1.ie: OblivCharPlanner.html
Only in /var/www/ocp/0.5.1.ie: .OblivCharPlanner.html.swp
Only in /var/www/ocp/0.5.0: ocp.html
diff -r /var/www/ocp/0.5.0/scripts/ocp-birth.js /var/www/ocp/0.5.1.ie/scripts/ocp-birth.js
154,170c154,157
< 
<     // Public: getters for all data of the currently selected race and gender
<     get str () { return this._getAttr(this._birth, 'str'); },
<     get int () { return this._getAttr(this._birth, 'int'); },
<     get wil () { return this._getAttr(this._birth, 'wil'); },
<     get agi () { return this._getAttr(this._birth, 'agi'); },
<     get spe () { return this._getAttr(this._birth, 'spe'); },
<     get end () { return this._getAttr(this._birth, 'end'); },
<     get per () { return this._getAttr(this._birth, 'per'); },
<     get luc () { return this._getAttr(this._birth, 'luc'); },
< 
<     get hea () { return this._getAttr(this._birth, 'hea'); },
<     get mag () { return this._getAttr(this._birth, 'mag'); },
<     get fat () { return this._getAttr(this._birth, 'fat'); },
<     get enc () { return this._getAttr(this._birth, 'enc'); },
< 
<     get specials () { return this._data[this._birth].specials; },
---
>     // Private: Gets the specials for a given race
>     _getSpecials: function (birth) {
>         return this._data[birth].specials;
>     },
235a223,232
> 
>         // Since lame browsers don't support getters, create public data members
>         // with read-only values for the newly selected birthsign
>         for (var attr in ocp.coreAttrs) {
>             this[attr] = this._getAttr(birth, attr);
>         }
>         for (var attr in ocp.derivedAttrs) {
>             this[attr] = this._getAttr(birth, attr);
>         }
>         this.specials = this._getSpecials(birth);
diff -r /var/www/ocp/0.5.0/scripts/ocp-cclass.js /var/www/ocp/0.5.1.ie/scripts/ocp-cclass.js
272,309d271
<     // Public: getters for all data of the currently selected class
<     get name ()   { return (this._custom ? this._customData.name : this._predefined); },
<     get spec ()   { return this._getCurrent().specialization; },
<     get favs ()   { return this._getCurrent().favoredAttrs; },
<     get majors () { return this._getCurrent().majorSkills; },
< 
<     get str () { return this._getAttr('str'); },
<     get int () { return this._getAttr('int'); },
<     get wil () { return this._getAttr('wil'); },
<     get agi () { return this._getAttr('agi'); },
<     get spe () { return this._getAttr('spe'); },
<     get end () { return this._getAttr('end'); },
<     get per () { return this._getAttr('per'); },
<     get luc () { return this._getAttr('luc'); },
< 
<     get bla () { return this._getSkill('bla'); },
<     get blu () { return this._getSkill('blu'); },
<     get han () { return this._getSkill('han'); },
<     get alc () { return this._getSkill('alc'); },
<     get con () { return this._getSkill('con'); },
<     get mys () { return this._getSkill('mys'); },
<     get alt () { return this._getSkill('alt'); },
<     get des () { return this._getSkill('des'); },
<     get res () { return this._getSkill('res'); },
<     get mar () { return this._getSkill('mar'); },
<     get sec () { return this._getSkill('sec'); },
<     get sne () { return this._getSkill('sne'); },
<     get acr () { return this._getSkill('acr'); },
<     get ath () { return this._getSkill('ath'); },
<     get lig () { return this._getSkill('lig'); },
<     get arm () { return this._getSkill('arm'); },
<     get blo () { return this._getSkill('blo'); },
<     get hvy () { return this._getSkill('hvy'); },
<     get ill () { return this._getSkill('ill'); },
<     get mer () { return this._getSkill('mer'); },
<     get spc () { return this._getSkill('spc'); },
< 
< 
366a329,343
>     // Private: Create public data members with the values for the current class
>     _createGetters: function() {
>         for (var attr in ocp.coreAttrs) {
>             this[attr] = this._getAttr(attr);
>         }
>         for (var skill in ocp.skills) {
>             this[skill] = this._getSkill(skill);
>         }
>         var current = this._getCurrent();
>         this.spec = current.specialization;
>         this.favs = current.favoredAttrs;
>         this.majors = current.majorSkills;
>     },
> 
> 
373a351,354
> 
>         // Since lame browsers don't support getters, create public data members
>         // with read-only values for the newly selected class
>         this._createGetters();
411a393,396
> 
>         // Since lame browsers don't support getters, create public data members
>         // with read-only values for the newly selected class
>         this._createGetters();
569,577c554,562
<                 '<colgroup />' +
<                 '<colgroup span="8" />' +
<                 '<colgroup span="3" class="firstMajor" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
---
>                 '<colgroup></colgroup>' +
>                 '<colgroup span="8"></colgroup>' +
>                 '<colgroup span="3" class="firstMajor"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
diff -r /var/www/ocp/0.5.0/scripts/ocp-existing.js /var/www/ocp/0.5.1.ie/scripts/ocp-existing.js
9,10c9,10
<     // Private: Level for this character
<     _level: 1,
---
>     // Public: Level for this character
>     level: 1,
12,13c12,13
<     // Private: Level totals for all core attrs, derived attrs, and skills
<     _totals: {},
---
>     // Public: Level totals for all core attrs, derived attrs, and skills
>     totals: {},
15,16c15,16
<     // Private: The list of major skills
<     _majors: [],
---
>     // Public: The list of major skills
>     majors: [],
23,27d22
<     // Public: Accessors for our data
<     get level ()  { return this._level; },
<     get totals () { return this._totals; },
<     get majors () { return this._majors; },
< 
97,98c92,93
<                 this._majors.push(skills[skillIndex]);
<                 if (this._majors.length >= ocp.MAJOR_NUM) {
---
>                 this.majors.push(skills[skillIndex]);
>                 if (this.majors.length >= ocp.MAJOR_NUM) {
111c106
<             this._totals[attr] = ocp.coreAttrs[attr].min;
---
>             this.totals[attr] = ocp.coreAttrs[attr].min;
116c111
<             this._totals[attr] = ocp.derivedAttrs[attr].min;
---
>             this.totals[attr] = ocp.derivedAttrs[attr].min;
121c116
<             this._totals[skill] = (this.isMajor(skill) ? ocp.SKILL_MAJOR_MIN : ocp.SKILL_MIN);
---
>             this.totals[skill] = (this.isMajor(skill) ? ocp.SKILL_MAJOR_MIN : ocp.SKILL_MIN);
135c130
<         this._level = Math.floor(newValue);
---
>         this.level = Math.floor(newValue);
152c147
<             att += '<li>' + ocp.derivedAttrs[attr].name + ': ' + this._totals[attr] + '</li>';
---
>             att += '<li>' + ocp.derivedAttrs[attr].name + ': ' + this.totals[attr] + '</li>';
159c154
<             att += '<li>' + ocp.coreAttrs[attr].name + ': ' + this._totals[attr] + '</li>';
---
>             att += '<li>' + ocp.coreAttrs[attr].name + ': ' + this.totals[attr] + '</li>';
175c170
<                         ocp.skills[skill].name + ': ' + this._totals[skill] +
---
>                         ocp.skills[skill].name + ': ' + this.totals[skill] +
330c325
<             ocp.existing._totals[attr] = this._slider[attr].attr('value');
---
>             ocp.existing.totals[attr] = this._slider[attr].attr('value');
333c328
<             ocp.existing._totals[attr] = this._slider[attr].attr('value');
---
>             ocp.existing.totals[attr] = this._slider[attr].attr('value');
348c343
<             this._slider[attr].attr('value', ocp.existing._totals[attr]);
---
>             this._slider[attr].attr('value', ocp.existing.totals[attr]);
351c346
<             this._slider[attr].attr('value', ocp.existing._totals[attr]);
---
>             this._slider[attr].attr('value', ocp.existing.totals[attr]);
651c646
<                 ocp.existing._totals[skill] = this._spinner[skill].attr('value');
---
>                 ocp.existing.totals[skill] = this._spinner[skill].attr('value');
655c650
<             ocp.existing._majors = majors;
---
>             ocp.existing.majors = majors;
685c680
<             this._spinner[skill].attr('value', ocp.existing._totals[skill]);
---
>             this._spinner[skill].attr('value', ocp.existing.totals[skill]);
diff -r /var/www/ocp/0.5.0/scripts/ocp-input.js /var/www/ocp/0.5.1.ie/scripts/ocp-input.js
13a14,15
>     // Public: Whether we are doing a new character or an existing one
>     isNewChar: true,
15,16c17,19
<     // Public: Return whether using a new (true) or existing (false) character
<     get isNewChar () {
---
> 
>     // Private: Sets our new character data attribute
>     _setNewChar: function() {
20c23
<         return !this._existingPane.selected;
---
>         this.isNewChar = !this._existingPane.selected;
25c28
<     get levelMin () {
---
>     levelMin: function () {
32c35
<     get majors () {
---
>     majors: function () {
58a62,64
>         // Initialize new/existing character
>         this._setNewChar();
> 
64c70,71
<     // Public: When the user toggles between new and existing characters, notify of changes
---
>     // Public: When the user toggles between new and existing characters,
>     //         update our new/existing char status and notify of changes
65a73
>         this._setNewChar();
diff -r /var/www/ocp/0.5.0/scripts/ocp.js /var/www/ocp/0.5.1.ie/scripts/ocp.js
12c12
<     VERSION: '0.5.0',
---
>     VERSION: '0.5.1',
316,318c316,318
<         delete ocp.order._attrs;
<         ocp.order._attrs = ['agi', 'spe', 'end', 'luc', 'str', 'int', 'wil', 'per'];
<         //ocp.order._attrs = ['agi', 'spe', 'end', 'str', 'int', 'wil', 'per', 'luc'];
---
>         delete ocp.order.attrs;
>         ocp.order.attrs = ['agi', 'spe', 'end', 'luc', 'str', 'int', 'wil', 'per'];
>         //ocp.order.attrs = ['agi', 'spe', 'end', 'str', 'int', 'wil', 'per', 'luc'];
398,403d397
<         totals[10] = nextLevel(totals[totals.length - 1], {
<             agi:5, spe:5, end:5, hea:18, mag:0, fat:10, enc:0,
<             blu:-1, mar:7, sec:3, sne:12, acr:4, ath:3, lig:3, arm:10, mer:3, spc:3
<         });
<         wasted[10] = { blu:'Skill reduced from being imprisoned.', mer:'', spc:'' };
< 
409,412c403,404
<                 if (wasted[lvl][skill].length < 1) {
<                     wasted[lvl][skill] = 'Skill ups were wasted because ' +
<                         ocp.coreAttrs[attr].name + ' was not leveled.';
<                 }
---
>                 wasted[lvl][skill] = 'Skill ups were wasted because ' +
>                     ocp.coreAttrs[attr].name + ' was not leveled.';
417,420c409,412
<         delete ocp.existing._totals;
<         ocp.existing._totals = totals[maxLevel];
<         delete ocp.existing._majors;
<         ocp.existing._majors = [];
---
>         delete ocp.existing.totals;
>         ocp.existing.totals = totals[maxLevel];
>         delete ocp.existing.majors;
>         ocp.existing.majors = [];
423c415
<             ocp.existing._majors.push(classMajors[skillIndex]);
---
>             ocp.existing.majors.push(classMajors[skillIndex]);
442c434
<         ocp.existing._level = 1;
---
>         ocp.existing.level = 1;
444c436
<         ocp.existing._level = maxLevel;
---
>         ocp.existing.level = maxLevel;
diff -r /var/www/ocp/0.5.0/scripts/ocp-level.js /var/www/ocp/0.5.1.ie/scripts/ocp-level.js
23,24c23,24
<     // Private: An error was hit during the leveling process
<     _error: false,
---
>     // Public: An error was hit during the leveling process
>     error: false,
27,29c27,28
<     // Public: getters for our data
<     get levelMax () { return this._totals.length - 1; },
<     get hadError () { return this._error; },
---
>     // Public: accessor for max level
>     levelMax: function () { return this._totals.length - 1; },
97,98c96,97
<         this._totals[ocp.input.levelMin] = totals;
<         this._wasted[ocp.input.levelMin] = {};
---
>         this._totals[ocp.input.levelMin()] = totals;
>         this._wasted[ocp.input.levelMin()] = {};
119c118
<         var majors = ocp.input.majors;
---
>         var majors = ocp.input.majors();
495c494
<         this._error = false;
---
>         this.error = false;
498c497
<         var current = this._totals[ocp.input.levelMin];
---
>         var current = this._totals[ocp.input.levelMin()];
520c519
<                 this._error = true;
---
>                 this.error = true;
528c527
<             this._error = true;
---
>             this.error = true;
diff -r /var/www/ocp/0.5.0/scripts/ocp-order.js /var/www/ocp/0.5.1.ie/scripts/ocp-order.js
9,10c9,10
<     // Private: The order attributes will be leveled
<     _attrs: [ 'end', 'str', 'luc', 'int', 'agi', 'spe', 'wil', 'per' ],
---
>     // Public: The order attributes will be leveled
>     attrs: [ 'end', 'str', 'luc', 'int', 'agi', 'spe', 'wil', 'per' ],
16,19d15
<     // Public: getters for our data
<     get attrs () { return this._attrs; },
< 
< 
49,50c45,46
<         for (var attrIndex in this._attrs) {
<             var attr = this._attrs[attrIndex];
---
>         for (var attrIndex in this.attrs) {
>             var attr = this.attrs[attrIndex];
98c94
<         this._attrs = newOrder;
---
>         this.attrs = newOrder;
diff -r /var/www/ocp/0.5.0/scripts/ocp-race.js /var/www/ocp/0.5.1.ie/scripts/ocp-race.js
277,315c277,280
< 
<     // Public: getters for all data of the currently selected race and gender
<     get str () { return this._getAttr(this._race, this._gender, 'str'); },
<     get int () { return this._getAttr(this._race, this._gender, 'int'); },
<     get wil () { return this._getAttr(this._race, this._gender, 'wil'); },
<     get agi () { return this._getAttr(this._race, this._gender, 'agi'); },
<     get spe () { return this._getAttr(this._race, this._gender, 'spe'); },
<     get end () { return this._getAttr(this._race, this._gender, 'end'); },
<     get per () { return this._getAttr(this._race, this._gender, 'per'); },
<     get luc () { return this._getAttr(this._race, this._gender, 'luc'); },
< 
<     get hea () { return this._getAttr(this._race, this._gender, 'hea'); },
<     get mag () { return this._getAttr(this._race, this._gender, 'mag'); },
<     get fat () { return this._getAttr(this._race, this._gender, 'fat'); },
<     get enc () { return this._getAttr(this._race, this._gender, 'enc'); },
< 
<     get bla () { return this._getSkill(this._race, 'bla'); },
<     get blu () { return this._getSkill(this._race, 'blu'); },
<     get han () { return this._getSkill(this._race, 'han'); },
<     get alc () { return this._getSkill(this._race, 'alc'); },
<     get con () { return this._getSkill(this._race, 'con'); },
<     get mys () { return this._getSkill(this._race, 'mys'); },
<     get alt () { return this._getSkill(this._race, 'alt'); },
<     get des () { return this._getSkill(this._race, 'des'); },
<     get res () { return this._getSkill(this._race, 'res'); },
<     get mar () { return this._getSkill(this._race, 'mar'); },
<     get sec () { return this._getSkill(this._race, 'sec'); },
<     get sne () { return this._getSkill(this._race, 'sne'); },
<     get acr () { return this._getSkill(this._race, 'acr'); },
<     get ath () { return this._getSkill(this._race, 'ath'); },
<     get lig () { return this._getSkill(this._race, 'lig'); },
<     get arm () { return this._getSkill(this._race, 'arm'); },
<     get blo () { return this._getSkill(this._race, 'blo'); },
<     get hvy () { return this._getSkill(this._race, 'hvy'); },
<     get ill () { return this._getSkill(this._race, 'ill'); },
<     get mer () { return this._getSkill(this._race, 'mer'); },
<     get spc () { return this._getSkill(this._race, 'spc'); },
< 
<     get specials () { return this._data[this._race].specials; },
---
>     // Private: Gets the specials for a given race
>     _getSpecials: function (race) {
>         return this._data[race].specials;
>     },
432c397
<         det += '<colgroup span="2" />';
---
>         det += '<colgroup span="2"></colgroup>';
437c402
< //              (firstRace ? '' : ' first') + '" />';
---
> //              (firstRace ? '' : ' first') + '"></colgroup>';
439c404
<                 (firstRace ? '' : ' class="first"') + ' />';
---
>                 (firstRace ? '' : ' class="first"') + '></colgroup>';
499c464
<                     det += '<td class="numeric" />';
---
>                     det += '<td class="numeric"></td>';
562a528,540
> 
>         // Since lame browsers don't support getters, create public data members
>         // with read-only values for the newly selected race and gender
>         for (var attr in ocp.coreAttrs) {
>             this[attr] = this._getAttr(race, gender, attr);
>         }
>         for (var attr in ocp.derivedAttrs) {
>             this[attr] = this._getAttr(race, gender, attr);
>         }
>         for (var skill in ocp.skills) {
>             this[skill] = this._getSkill(race, skill);
>         }
>         this.specials = this._getSpecials(race);
diff -r /var/www/ocp/0.5.0/scripts/ocp-results.js /var/www/ocp/0.5.1.ie/scripts/ocp-results.js
37c37
<         var totals = ocp.level.levelTotals(ocp.input.levelMin);
---
>         var totals = ocp.level.levelTotals(ocp.input.levelMin());
42,43c42,43
<                 '<colgroup />' +
<                 '<colgroup span="4" />' +
---
>                 '<colgroup></colgroup>' +
>                 '<colgroup span="4"></colgroup>' +
86c86
<                     '<td class="numeric" />' +
---
>                     '<td class="numeric"></td>' +
106c106
<         var totals = ocp.level.levelTotals(ocp.input.levelMin);
---
>         var totals = ocp.level.levelTotals(ocp.input.levelMin());
111,112c111,112
<                 '<colgroup span="2" />' +
<                 '<colgroup span="4" />' +
---
>                 '<colgroup span="2"></colgroup>' +
>                 '<colgroup span="4"></colgroup>' +
182,191c182,191
<                 '<colgroup />' +
<                 '<colgroup span="8" />' +
<                 '<colgroup span="4" class="first" />' +
<                 '<colgroup span="3" class="firstMajor" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
<                 '<colgroup span="3" class="first" />' +
---
>                 '<colgroup></colgroup>' +
>                 '<colgroup span="8"></colgroup>' +
>                 '<colgroup span="4" class="first"></colgroup>' +
>                 '<colgroup span="3" class="firstMajor"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
225c225
<         var current = ocp.level.levelTotals(ocp.input.levelMin);
---
>         var current = ocp.level.levelTotals(ocp.input.levelMin());
228c228
<         for (var level = ocp.input.levelMin; level <= ocp.level.levelMax; level++) {
---
>         for (var level = ocp.input.levelMin(); level <= ocp.level.levelMax(); level++) {
278c278
<         if (ocp.level.hadError) {
---
>         if (ocp.level.error) {
324c324
<         for (var level = ocp.input.levelMin; level <= ocp.level.levelMax; level++) {
---
>         for (var level = ocp.input.levelMin(); level <= ocp.level.levelMax(); level++) {
335,336c335,336
<         var firstTotals = ocp.level.levelTotals(ocp.input.levelMin);
<         var lastTotals  = ocp.level.levelTotals(ocp.level.levelMax);
---
>         var firstTotals = ocp.level.levelTotals(ocp.input.levelMin());
>         var lastTotals  = ocp.level.levelTotals(ocp.level.levelMax());
377c377
<             var numLevels = maxAtLevel - ocp.input.levelMin;
---
>             var numLevels = maxAtLevel - ocp.input.levelMin();
395,397c395,397
<                 '<colgroup />' +
<                 '<colgroup span="3" />' +
<                 '<colgroup span="3" class="first" />' +
---
>                 '<colgroup></colgroup>' +
>                 '<colgroup span="3"></colgroup>' +
>                 '<colgroup span="3" class="first"></colgroup>' +
400c400
<                     '<th />' +
---
>                     '<th></th>' +
473,474c473,474
<                     '<td colspan="2" />' +
<                     '<td class="numeric">' + ocp.level.levelMax + '</td>' +
---
>                     '<td colspan="2"></td>' +
>                     '<td class="numeric">' + ocp.level.levelMax() + '</td>' +
480c480
<                         sparePerLevel(totals.spare, ocp.level.levelMax) +
---
>                         sparePerLevel(totals.spare, ocp.level.levelMax()) +
489c489
<         if (ocp.level.hadError) {
---
>         if (ocp.level.error) {
diff -r /var/www/ocp/0.5.0/setup.bash /var/www/ocp/0.5.1.ie/setup.bash
3,48d2
< # This is a bash/ksh/sh compatible script that must be source'd
< # into the current shell so environment variables, functions, and
< # aliases can be set.
< 
< # Project root directory
< export OCP_PROJ="/var/www/ocp"
< 
< # Ensure we are in a version under the root
< if [ ".${PWD#$OCP_PROJ/}" = ".$PWD" ] ; then
<     echo "Can only setup while under a version subdir of $OCP_PROJ."
<     return 1
< fi
< 
< # Get the version from the subdirectory name
< export OCP_VER="${PWD#$OCP_PROJ/}"
< export OCP_VER="${OCP_VER%%/*}"
< 
< # Root directory for this version
< export OCP_ROOT="$OCP_PROJ/$OCP_VER"
< 
< # Quick CD shortcuts
< function cdproj { cd "$OCP_PROJ${@:+/$@}" ;}
< function cdtop { cd "$OCP_ROOT${@:+/$@}" ;}
< 
< # Function to get the version from the source
< function ocpSourceVersion {
<     perl -ne 'print $1 if /\sVERSION:[^\d]+([\d.]+)/' $OCP_ROOT/scripts/ocp.js
< }
< 
< # Validate that the source version matches the directory version
< function ocpValidateVersions {
<     _srcver="`ocpSourceVersion`"
<     if [ ".$OCP_VER" != ".$_srcver" ] ; then
<         echo "Error: Source version $_srcver does not match directory" \
<             "version $OCP_VER."
<         unset _srcver
<         return 1
<     fi
<     unset _srcver
<     return 0
< }
< 
< # If the source and dir versions don't match, return failure
< ocpValidateVersions || return 1
< 
< 
50,51c4,5
< export OCP_SRC="\
<     ocp.html \
---
> export SRC_FILES="\
>     OblivCharPlanner.html \
67,68c21
< alias nedit-all="nedit-nc -g 111x40 $OCP_SRC"
< 
---
> alias nedit-all="nedit-nc -g 111x40 $SRC_FILES"
70,86c23,39
< # Backup root directory
< export OCP_BACKUP="$OCP_PROJ/backup"
< function cdback { cd "$OCP_BACKUP${@:+/$@}" ;}
< 
< # Backup the current version
< function backupsrc {
<     ocpValidateVersions &&
<     ( cd "$OCP_ROOT" &&
<       tar -cvzf "$OCP_BACKUP/backup-`date '+%Y%m%d'`-v$OCP_VER.tar.gz" .
<     )
< }
< 
< # Backup the original images
< function backuporig {
<     ( cd "$OCP_PROJ/original-images" &&
<       tar -cvzf "$OCP_BACKUP/backup-`date '+%Y%m%d'`-original-images.tar.gz" .
<     )
---
> # Quick backup
> function backupcwd {
>     dat="`date '+%Y%m%d'`";
>     ver="`perl -ne 'print $1 if /\sVERSION:[^\d]+([\d.]+)/' scripts/ocp.js`"
>     tar -cvzf backup-$dat-v$ver.tar.gz \
>         --exclude=\*.tar.gz \
>         --exclude=images/birth/original \
>         --exclude=images/class/original \
>         --exclude=images/race/original \
>         *
> }
> function backuporigcwd {
>     dat="`date '+%Y%m%d'`";
>     ver="`perl -ne 'print $1 if /\sVERSION:[^\d]+([\d.]+)/' scripts/ocp.js`"
>     tar -cvzf backup-$dat-v$ver-plus-orig.tar.gz \
>         --exclude=\*.tar.gz \
>         *
89d41
< 
95,97c47
<     sub prep() {
<         return sort grep { not /^\.svn$/ and not /\.(png|gif|jpg|jpeg)$/ } @_;
<     }
---
>     sub prep() { return sort grep { not /^\.svn$/ and not /\.(png|gif|jpg|jpeg)$/ } @_; }
100,102c50
<     find( { wanted => \&want, preprocess => \&prep,
<             no_chdir => 1, follow => 0 },
<         @ARGV );' -- "${@:-.}"
---
>     find( { wanted => \&want, preprocess => \&prep, no_chdir => 1, follow => 0 }, @ARGV );' -- "${@:-.}"
107,116c55,57
< alias grepsrc='find_text_files -0 "$OCP_ROOT" | xargs -0 grep'
< function grepver {
<     if [ $# -lt 1 ] ; then
<         echo "Error: grepver requires at least one argument."
<         return 1
<     else
<         _ver="$1" ; shift
<         find_text_files -0 "$OCP_PROJ/$_ver" | xargs -0 grep ${@:+"$@"}
<     fi
< }
---
> #alias grepsrc='find_text_files -0 "$FLEXDKP_SOURCE_DIR" | xargs -0 grep'
> #alias greppub='find_text_files -0 "$FLEXDKP_PUBLIC_DIR" | xargs -0 grep'
> #alias grepzend='find_text_files -0 "$FLEXDKP_ZEND_DIR" | xargs -0 grep'
120c61,62
< alias checksrc='find_text_files -0 "$OCP_ROOT" | xargs -0 grep -E "([[:cntrl:]]|[[:space:]]\$)"'
---
> #alias checksrc='find_text_files -0 $FLEXDKP_SOURCE_DIR | xargs -0 grep -E "([[:cntrl:]]|[[:space:]]\$)"'
> #alias checkpub='find_text_files -0 $FLEXDKP_PUBLIC_DIR | xargs -0 grep -E "([[:cntrl:]]|[[:space:]]\$)"'
152a95
> 
154c97,98
< alias cleansrc='cleandir "$OCP_ROOT"'
---
> #alias cleansrc='cleandir "$FLEXDKP_SOURCE_DIR"'
> #alias cleanpub='cleandir "$FLEXDKP_PUBLIC_DIR"'
160c104
<         grep -v '\.txt$' | \
---
>         grep -v htaccess | \
166d109
< alias countsrc='countdir "$OCP_ROOT"'
169,202c112,115
< function wcdir {
<     find_text_files "${@:-.}" | \
<         grep -v setup.bash | \
<         grep -v '\.txt$' | \
<         xargs wc --chars --max-line-length --lines
< }
< alias wccwd='wcdir .'
< alias wcsrc='wcdir "$OCP_ROOT"'
< 
< # Diff versus current source
< # *** Be awesome if these could compare sub-dirs
< # *** (e.g. while in .../ver2/scripts, diffcwd would only compare
< # *** .../ver1/scripts to ../ver2/scripts)
< function diffdir {
<     if [ $# -lt 2 ] ; then
<         echo "Error: diffdir requires at least two arguments."
<         return 1
<     else
<         _dir1="$1" ; shift
<         _dir2="$1" ; shift
<         diff -r "$@" "$_dir1" "$_dir2"
<     fi
< }
< alias diffcwd='diffdir "$OCP_ROOT" .'
< function diffver {
<     if [ $# -lt 1 ] ; then
<         echo "Error: diffver requires at least one argument."
<         return 1
<     else
<         _ver="$1" ; shift
<         diff -r "$@" "$OCP_ROOT" "$OCP_PROJ/$_ver"
<     fi
< }
< 
---
> alias wccwd="find_text_files . | \
>     grep -v setup.bash | \
>     grep -v htaccess | \
>     xargs wc --chars --max-line-length --lines"
245,248d157
< 
< 
< # Return success
< return 0
diff -r diff -r /var/www/ocp/0.5.0/ocp.html /var/www/ocp/0.5.1.ie/OblivCharPlanner.html
9c9,10
<     Developed on FireFox 3.0.* using Dojo 1.3.*.
---
>     Written with Dojo 1.3.1
>     Developed on FireFox 3.0.*.
11,14c12,14
<     For JavaScript browser compatibility per
<     http://en.wikipedia.org/wiki/Comparison_of_layout_engines_(ECMAScript)
<     + Using "for" (and dereferencing an index) instead of "for each"
<     + Using "dojo.indexOf" instead of "Array.indexOf"
---
>     For IE compatibility (IE parses this as HTML because XHTML is unsupported),
>     this roughly follows http://www.w3.org/TR/xhtml-media-types/
>     The key difference is elements that _can_ have contents do NOT use /> shorthand.
16,20c16,21
<     This currently fails in IE for several reasons, but major ones are:
<     + IE doesn't support XHTML. Per http://www.w3.org/TR/xhtml-media-types/,
<       many <.../> tags need to be converted to <...></...>.
<     + IE doesn't support getters which are used all over the place
<     Even with these fixed, the styles are still not properly rendered in IE.
---
>     For JavaScript browser compatibility:
>     http://en.wikipedia.org/wiki/Comparison_of_layout_engines_(ECMAScript)
>     Using "for" (and dereferencing an index) instead of "for each"
>     Using "dojo.indexOf" instead of "Array.indexOf"
>     Since IE doesn't support getters, converted them to public data members,
>     to run-time generated read-only public data members, and/or to functions.
